generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  password              String
  name                  String?
  accounts              Account[]
  transactions          Transaction[]
  categories            Category[]
  budgetMonths          BudgetMonth[]
  preferences           Json?
  goals                 Goal[]
  recurringTransactions ReccurringTransaction[]
  refreshTokens         RefreshToken[]
}

model RefreshToken {
  id           Int           @id @default(autoincrement())
  token        String        @unique
  expiresAt    DateTime
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  transactions Transaction[]
}

model Account {
  id                    Int                     @id @default(autoincrement())
  name                  String
  balance               Int
  user                  User                    @relation(fields: [userId], references: [id])
  userId                Int
  transactions          Transaction[]
  ReccurringTransaction ReccurringTransaction[]
}

model Transaction {
  id             Int           @id @default(autoincrement())
  amount         Int
  description    String
  date           DateTime      @default(now())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  account        Account       @relation(fields: [accountId], references: [id])
  accountId      Int
  category       Category?     @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  RefreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id])
  refreshTokenId Int?
}

model Category {
  id                    Int                     @id @default(autoincrement())
  name                  String
  group                 String?
  user                  User                    @relation(fields: [userId], references: [id])
  userId                Int
  budgetItems           BudgetItems[]
  Transaction           Transaction[]
  ReccurringTransaction ReccurringTransaction[]
}

model BudgetMonth {
  id     Int           @id @default(autoincrement())
  month  String
  user   User          @relation(fields: [userId], references: [id])
  userId Int
  items  BudgetItems[]
}

model BudgetItems {
  id            Int         @id @default(autoincrement())
  amount        Int
  spent         Int         @default(0)
  available     Int         @default(0)
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    Int
  budgetMonth   BudgetMonth @relation(fields: [budgetMonthId], references: [id])
  budgetMonthId Int

  @@unique([budgetMonthId, categoryId])
}

model ReccurringTransaction {
  id           Int       @id @default(autoincrement())
  amount       Int
  description  String
  frequency    String
  startDate    DateTime
  endDate      DateTime?
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  account      Account   @relation(fields: [accountId], references: [id])
  accountId    Int
  category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  lastExecuted DateTime?
  active       Boolean   @default(true)
}

model Goal {
  id            Int       @id @default(autoincrement())
  name          String
  targetAmount  Int
  currentAmount Int       @default(0)
  dueDate       DateTime?
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
}
